// scripts/paths.js

// Import necessary Node.js modules
const fs = require('fs');        // File System module for file operations
const path = require('path');    // Path module for working with file and directory paths
const os = require('os');        // OS module for operating system-related utility methods

console.log("-------------------- START path_handler---------------");
/**
 * Retrieves the local IPv4 address of the machine.
 * It iterates through network interfaces and returns the first non-internal IPv4 address.
 * @returns {string|null} The local IPv4 address or null if not found or an error occurs.
 */
function getLocalIpAddress() {
  try {
    const networkInterfaces = os.networkInterfaces(); // Get all network interfaces

    // Iterate over each network interface (e.g., 'Wi-Fi', 'Ethernet')
    for (const interfaceName in networkInterfaces) {
      const networkInterface = networkInterfaces[interfaceName];

      // Check if the interface is valid (it might be undefined in some edge cases)
      if (networkInterface) {
        // Iterate over each configuration for the current interface
        for (const interfaceConfig of networkInterface) {
          // We are interested in IPv4 addresses that are not internal (loopback)
          if (interfaceConfig.family === 'IPv4' && !interfaceConfig.internal) {
            return interfaceConfig.address; // Return the found IP address
          }
        }
      }
    }
    console.warn("No suitable local IPv4 address found. Returning null.");
    return null; // No suitable IP address was found
  } catch (error) {
    console.error("Error occurred while trying to get the local IP address:", error);
    return null; // Return null in case of an error
  }
}

// --- Configuration Constants ---

// Determine the root path of the project.
// __dirname is the directory of the current script (scripts/)
// path.resolve navigates up one level to the project root.
const ROOT_PATH = path.resolve(__dirname, '..');

// Define various project paths based on the project root
const WEB_BUILD_PATH    = path.join(ROOT_PATH, 'frontend', 'dist');
const CORE_PATH         = path.join(ROOT_PATH, 'backend', 'Core');
const CORE_SAMPLES_PATH = path.join(CORE_PATH, 'Samples');
const CORE_JSON_PATH    = path.join(CORE_PATH, 'JSON');

// Get the local IP address
const VITE_SERVER_IP = getLocalIpAddress();

// Define server ports
const VITE_DEV_PORT   = 5173;
const VITE_BUILD_PORT = 3001;

// --- .env File Content Generation ---

// Create an array of strings, each representing a line in the .env file
const envContentLines = [
  `# Project Paths - Automatically generated by scripts/paths.js`,
  `ROOT_PATH=${ROOT_PATH}`,
  `WEB_BUILD_PATH=${WEB_BUILD_PATH}`,
  `CORE_PATH=${CORE_PATH}`,
  `CORE_SAMPLES_PATH=${CORE_SAMPLES_PATH}`,
  `CORE_JSON_PATH=${CORE_JSON_PATH}`,
  ``,
  `# Server Configuration`,
  `VITE_SERVER_IP=${VITE_SERVER_IP || '127.0.0.1'}`, // Fallback to localhost if IP not found
  `VITE_DEV_PORT=${VITE_DEV_PORT}`,
  `VITE_BUILD_PORT=${VITE_BUILD_PORT}`,
];

// Join the lines into a single string with newline characters
const envFileContent = envContentLines.join('\n');

// --- .env File Writing ---

// Define the path to the .env file in the project root
const envFilePath = path.join(ROOT_PATH, '.env');

try {
  // Write the generated content to the .env file
  // 'utf8' is the default encoding, but it's good practice to specify it.
  fs.writeFileSync(envFilePath, envFileContent + '\n', 'utf8');
  console.log(`Successfully updated .env file at: ${envFilePath}`);
  if (!VITE_SERVER_IP) {
    console.warn("[WARNING] Local IP address could not be determined. SERVER_IP in .env was set to '127.0.0.1'.");
  } else {
    console.log(`Local IP address detected: ${VITE_SERVER_IP}`);
  }
} catch (err) {
  // Log an error message and exit if writing the .env file fails
  console.error(`‚ùå Critical Error: Failed to write .env file at ${envFilePath}.`);
  console.error("   Error details:", err);
  process.exit(1); // Exit with a failure code
}

console.log("-------------------- FINISH path_handler---------------");
